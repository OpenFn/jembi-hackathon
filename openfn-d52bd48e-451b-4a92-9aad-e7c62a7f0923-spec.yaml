name: jembi-demo
# description:
# credentials:
# globals:
workflows:
  archive-cdr-to-ndr:
    name: archive-cdr-to-ndr
    jobs:
      Map-and-process-data:
        name: Map and process data
        adaptor: '@openfn/language-common@latest'
        # credential:
        # globals:
        body: |
          fn(state => {
            // do some things to state
            return state;
          });
      Validate-with-NDR-HAPI-FHIR:
        name: Validate with NDR HAPI FHIR
        adaptor: '@openfn/language-http@latest'
        # credential:
        # globals:
        body: |
          post('/Patient/$validate', {
             body: state.data,
             headers: {'content-type': 'application/json'},
           }); 
          
          //  create('/Patient/$validate', {
          //    body: state.data,
          //    headers: {'content-type': 'application/json'},
          //  }); 
          
          
      Post-to-HAPI-FHIR:
        name: Post to HAPI FHIR
        adaptor: '@openfn/language-http@latest'
        # credential:
        # globals:
        body: |
          post("Patient", {body: state.data,  
           headers: {'content-type': 'application/json'}, 
           errors: { 400: false }, 	
           parseAs: 'json',
           }, state => {
            //console.log('response ::', JSON.stringify(state.response, null,2));
            state.data.response = state.response; 
            return state; 
           }
          )
          
          // create("Patient", {body: state.data,  
          //  headers: {'content-type': 'application/json'}},
          // )a
          
          // request("POST","Patient", {body: state.data,  
          //  headers: {'content-type': 'application/json'}});
      Report-Error:
        name: Report Error
        adaptor: '@openfn/language-postgresql@latest'
        # credential:
        # globals:
        body: |
          fn(state => {
            state.errorLog = {
              resource_id: state.data.id,
              failure_type: 'validation error',
              //data: state.references[0], //data we tried to create
              resource_type: state.references[0].resourceType,
              issue_code: state.data.issue[0].code,
              issue_detail: state.data.issue[0].details.text,
              issue_diagnostics: state.data.issue[0].diagnostics,
              issue_location: state.data.issue[0].location,
              last_updated: state.data.meta.lastUpdated,
              statusCode: state.data.response.statusCode,
              statusMessage: state.data.response.statusMessage
            }
            console.log('Error to log:: ', JSON.stringify(state.errorLog,null,2)); 
            return state; 
          });
          
          // insert('fhir_errors', 
          //   state => state.errorLog, 
          //   { logValues: true }
          // );
          
          //kafka mappings - don't think we need these
          // ts: state.request.ts,
          //     topic: state.request.topic,
          //     offset: state.request.offset,
          //     partition: state.request.partition,
          //     key: state.request.key,
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Map-and-process-data:
        source_trigger: webhook
        target_job: Map-and-process-data
        condition_type: always
        enabled: true
      Map-and-process-data->Validate-with-NDR-HAPI-FHIR:
        source_job: Map-and-process-data
        target_job: Validate-with-NDR-HAPI-FHIR
        condition_type: on_job_success
        enabled: false
      Post-to-HAPI-FHIR->Report-Error:
        source_job: Post-to-HAPI-FHIR
        target_job: Report-Error
        condition_type: js_expression
        condition_label: failed?
        condition_expression: state.data.response.statusCode==400
        enabled: true
      Map-and-process-data->Post-to-HAPI-FHIR:
        source_job: Map-and-process-data
        target_job: Post-to-HAPI-FHIR
        condition_type: on_job_success
        enabled: true
  cdr-to-ndr:
    name: cdr-to-ndr
    jobs:
      Analyze-Data:
        name: Analyze Data
        adaptor: '@openfn/language-common@latest'
        # credential:
        # globals:
        body: |
          fn(state => {
            const parsedData = JSON.parse(state.data.body); 
            console.log(parsedData); 
            state.resource = parsedData.entry[0].resource; 
            console.log('show only the resource:: ', state.resource);
            return state; 
          })
      Create-Organization:
        name: Create Organization
        adaptor: '@openfn/language-fhir@latest'
        # credential:
        # globals:
        body: |
          // Use pure JavaScript to add operations to your
          // step. Click Docs to see list of operations or visit
          // https://bit.ly/OFNJWG for our job writing guide
          // and example job codes.
          create("Organization", $.organization)
      Create-FHIR-Resource:
        name: Create FHIR Resource
        adaptor: '@openfn/language-http@latest'
        # credential:
        # globals:
        body: |
          post($.resource.resourceType, 
            {
              body: $.mapped_resource, 
              errors: { 400: false }, 	
              headers: {'content-type': 'application/json'},
              parseAs: 'json'
            },
            state => {
              state.data.response = state.response; 
              return state; 
          })
      Create-Encounter:
        name: Create Encounter
        adaptor: '@openfn/language-fhir@latest'
        # credential:
        # globals:
        body: |
          // Use pure JavaScript to add operations to your
          // step. Click Docs to see list of operations or visit
          // https://bit.ly/OFNJWG for our job writing guide
          // and example job codes.
          
      Create-Condition:
        name: Create Condition
        adaptor: '@openfn/language-fhir@latest'
        # credential:
        # globals:
        body: |
          // Use pure JavaScript to add operations to your
          // step. Click Docs to see list of operations or visit
          // https://bit.ly/OFNJWG for our job writing guide
          // and example job codes.
          
      Log-error:
        name: Log error
        adaptor: '@openfn/language-postgresql@latest'
        # credential:
        # globals:
        body: |
          fn(state => {
            state.errorLog = {
              resource_id: state.data.id,
              failure_type: 'validation error',
              //data: state.references[0], //data we tried to create
              resource_type: state.references[0].resourceType,
              issue_code: state.data.issue[0].code,
              issue_detail: state.data.issue[0].details.text,
              issue_diagnostics: state.data.issue[0].diagnostics,
              issue_location: state.data.issue[0].location,
              last_updated: state.data.meta.lastUpdated,
              statusCode: state.data.response.statusCode,
              statusMessage: state.data.response.statusMessage
            }
            console.log('Error to log:: ', JSON.stringify(state.errorLog,null,2)); 
            return state; 
          });
          
          // insert('fhir_errors', 
          //   state => state.errorLog, 
          //   { logValues: true }
          // );
          
          //kafka mappings - don't think we need these
          // ts: state.request.ts,
          //     topic: state.request.topic,
          //     offset: state.request.offset,
          //     partition: state.request.partition,
          //     key: state.request.key,
      Map-Data:
        name: Map Data
        adaptor: '@openfn/language-common@latest'
        # credential:
        # globals:
        body: |
          fn(state=> {
            //Map CDR data to NDR FHIR IG
              const cdrData = state.resource;
              const mapped_resource = {
                resourceType: cdrData.resourceType,
                id: cdrData.id,
                identifier: cdrData.identifier?.map(id => ({
                  type: id.system == "http://cdr.aacahb.gov.et/MRN"? {
                              "coding": [
                                  {
                                      "code": "MR",
                                      "display": "Medical record number",
                                      "system": "http://terminology.hl7.org/CodeSystem/v2-0203"
                                  }
                              ],
                              "text": "Medical record number"
                          } : undefined,
                  system: id.system,
                  value: id.value,
                })),
                active: cdrData.active,
                gender: cdrData.gender,
                birthDate: cdrData.birthDate,
                address: cdrData.address,
                managingOrganization: cdrData.managingOrganization,
                deceasedBoolean: cdrData.deceasedBoolean,
                text: cdrData.text
              };
          // returned the mapped fhir resource
              return {...state, mapped_resource}
          })
      Remove-PIIs:
        name: Remove PIIs
        adaptor: '@openfn/language-common@latest'
        # credential:
        # globals:
        body: |
          fn(state=> {
              //Removig PII here before sending it to NDR
              delete state.resource.name;
              delete state.resource.telecom;
              delete state.resource.contact;
              delete state.resource.extension; //contains religion, occupation, education level, target pop group
              delete state.resource.maritalStatus; 
          
              //only keeping birthdate and gender
          
              return state;
          })
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Analyze-Data:
        source_trigger: webhook
        target_job: Analyze-Data
        condition_type: always
        enabled: true
      Create-FHIR-Resource->Log-error:
        source_job: Create-FHIR-Resource
        target_job: Log-error
        condition_type: js_expression
        condition_label: failed?
        condition_expression: state.data.response.statusCode==400
        enabled: true
      Map-Data->Create-FHIR-Resource:
        source_job: Map-Data
        target_job: Create-FHIR-Resource
        condition_type: on_job_success
        enabled: true
      Analyze-Data->Remove-PIIs:
        source_job: Analyze-Data
        target_job: Remove-PIIs
        condition_type: on_job_success
        enabled: true
      Remove-PIIs->Map-Data:
        source_job: Remove-PIIs
        target_job: Map-Data
        condition_type: on_job_success
        enabled: true
  test-patient-fhir:
    name: test-patient-fhir
    jobs:
      parse-json:
        name: parse json
        adaptor: '@openfn/language-common@latest'
        # credential:
        # globals:
        body: |
          fn(state => {
            const parsedData = JSON.parse(state.data.body); 
            console.log(parsedData); 
            state.resource = parsedData.entry[0].resource; 
            console.log('show only the resource:: ', state.resource);
            return state; 
          })
          
          
          //testing using create instead of post
          //create("Patient", state => state.data)
           //headers: {'content-type': 'application/json'}, 
           //errors: { 400: false }, 	
           //parseAs: 'json',
          //  , state => {
          //   //console.log('response ::', JSON.stringify(state.response, null,2));
          //   state.data.response = state.response; 
          //   return state; 
          //  }
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->parse-json:
        source_trigger: webhook
        target_job: parse-json
        condition_type: always
        enabled: true
  test-patient-http:
    name: test-patient-http
    jobs:
      Post-Patient:
        name: Post Patient
        adaptor: '@openfn/language-http@latest'
        # credential:
        # globals:
        body: |
          post("Patient", {body: state.data,  
           headers: {'content-type': 'application/json'}, 
           parseAs: 'json',
           //errors: { 400: false }, 
           })
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Post-Patient:
        source_trigger: webhook
        target_job: Post-Patient
        condition_type: always
        enabled: true