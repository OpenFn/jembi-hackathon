name: jembi-demo
# description:
# credentials:
# globals:
workflows:
  [Archive]-cdr-to-ndr:
    name: [Archive] cdr-to-ndr
    jobs:
      Map-and-process-data:
        name: Map and process data
        adaptor: '@openfn/language-common@latest'
        # credential:
        # globals:
        body: |
          fn(state => {
            // do some things to state
            return state;
          });
      Validate-with-NDR-HAPI-FHIR:
        name: Validate with NDR HAPI FHIR
        adaptor: '@openfn/language-http@latest'
        # credential:
        # globals:
        body: |
          post('/Patient/$validate', {
             body: state.data,
             headers: {'content-type': 'application/json'},
           }); 
          
          //  create('/Patient/$validate', {
          //    body: state.data,
          //    headers: {'content-type': 'application/json'},
          //  }); 
          
          
      Post-to-HAPI-FHIR:
        name: Post to HAPI FHIR
        adaptor: '@openfn/language-http@latest'
        # credential:
        # globals:
        body: |
          post("Patient", {body: state.data,  
           headers: {'content-type': 'application/json'}, 
           errors: { 400: false }, 	
           parseAs: 'json',
           }, state => {
            //console.log('response ::', JSON.stringify(state.response, null,2));
            state.data.response = state.response; 
            return state; 
           }
          )
          
          // create("Patient", {body: state.data,  
          //  headers: {'content-type': 'application/json'}},
          // )a
          
          // request("POST","Patient", {body: state.data,  
          //  headers: {'content-type': 'application/json'}});
      Report-Error:
        name: Report Error
        adaptor: '@openfn/language-postgresql@latest'
        # credential:
        # globals:
        body: |
          fn(state => {
            state.errorLog = {
              resource_id: state.data.id,
              failure_type: 'validation error',
              //data: state.references[0], //data we tried to create
              resource_type: state.references[0].resourceType,
              issue_code: state.data.issue[0].code,
              issue_detail: state.data.issue[0].details.text,
              issue_diagnostics: state.data.issue[0].diagnostics,
              issue_location: state.data.issue[0].location,
              last_updated: state.data.meta.lastUpdated,
              statusCode: state.data.response.statusCode,
              statusMessage: state.data.response.statusMessage
            }
            console.log('Error to log:: ', JSON.stringify(state.errorLog,null,2)); 
            return state; 
          });
          
          // insert('fhir_errors', 
          //   state => state.errorLog, 
          //   { logValues: true }
          // );
          
          //kafka mappings - don't think we need these
          // ts: state.request.ts,
          //     topic: state.request.topic,
          //     offset: state.request.offset,
          //     partition: state.request.partition,
          //     key: state.request.key,
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Map-and-process-data:
        source_trigger: webhook
        target_job: Map-and-process-data
        condition_type: always
        enabled: true
      Map-and-process-data->Validate-with-NDR-HAPI-FHIR:
        source_job: Map-and-process-data
        target_job: Validate-with-NDR-HAPI-FHIR
        condition_type: on_job_success
        enabled: false
      Map-and-process-data->Post-to-HAPI-FHIR:
        source_job: Map-and-process-data
        target_job: Post-to-HAPI-FHIR
        condition_type: on_job_success
        enabled: true
      Post-to-HAPI-FHIR->Report-Error:
        source_job: Post-to-HAPI-FHIR
        target_job: Report-Error
        condition_type: js_expression
        condition_label: failed?
        condition_expression: state.data.response.statusCode==400
        enabled: true
  cdr-to-ndr:
    name: cdr-to-ndr
    jobs:
      Annonymize-Data:
        name: Annonymize Data
        adaptor: '@openfn/language-common@latest'
        # credential:
        # globals:
        body: |
          fn(state=> {
              delete state.data.name;
              delete state.data.telecom;
              delete state.data.address;
              delete state.data.contact;
              delete state.data.extension; //contains religion, occupation, education level, target pop group
              delete state.data.maritalStatus; 
          
              //only keeping birthdate and gender
          
              return state;
          })
      Create-Organization:
        name: Create Organization
        adaptor: '@openfn/language-fhir@latest'
        # credential:
        # globals:
        body: |
          // Use pure JavaScript to add operations to your
          // step. Click Docs to see list of operations or visit
          // https://bit.ly/OFNJWG for our job writing guide
          // and example job codes.
          
      Create-Patient:
        name: Create Patient
        adaptor: '@openfn/language-fhir@latest'
        # credential:
        # globals:
        body: |
          // Use pure JavaScript to add operations to your
          // step. Click Docs to see list of operations or visit
          // https://bit.ly/OFNJWG for our job writing guide
          // and example job codes.
          
      Create-Encounter:
        name: Create Encounter
        adaptor: '@openfn/language-fhir@latest'
        # credential:
        # globals:
        body: |
          // Use pure JavaScript to add operations to your
          // step. Click Docs to see list of operations or visit
          // https://bit.ly/OFNJWG for our job writing guide
          // and example job codes.
          
      Create-Condition:
        name: Create Condition
        adaptor: '@openfn/language-fhir@latest'
        # credential:
        # globals:
        body: |
          // Use pure JavaScript to add operations to your
          // step. Click Docs to see list of operations or visit
          // https://bit.ly/OFNJWG for our job writing guide
          // and example job codes.
          
      Log-error:
        name: Log error
        adaptor: '@openfn/language-postgresql@latest'
        # credential:
        # globals:
        body: |
          // Use pure JavaScript to add operations to your
          // step. Click Docs to see list of operations or visit
          // https://bit.ly/OFNJWG for our job writing guide
          // and example job codes.
          
      Map-Data:
        name: Map Data
        adaptor: '@openfn/language-common@latest'
        # credential:
        # globals:
        body: |
          fn(state=> {
          const fhirData = state.data;
          
          const patient = {
            resourceType: fhirData.resourceType,
            id: fhirData.id,
            identifier: fhirData.identifier.map(id => ({
              system: id.system,
              value: id.value,
            })),
            active: fhirData.active,
            gender: fhirData.gender,
            birthDate: fhirData.birthDate,
          
            managingOrganization: fhirData.managingOrganization.reference,
            deceasedBoolean: fhirData.deceasedBoolean,
            text: fhirData.text
          };
          
          return {...state, patient}
          })
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Annonymize-Data:
        source_trigger: webhook
        target_job: Annonymize-Data
        condition_type: always
        enabled: true
      Create-Encounter->Log-error:
        source_job: Create-Encounter
        target_job: Log-error
        condition_type: on_job_failure
        enabled: true
      Create-Condition->Log-error:
        source_job: Create-Condition
        target_job: Log-error
        condition_type: on_job_failure
        enabled: true
      Create-Patient->Log-error:
        source_job: Create-Patient
        target_job: Log-error
        condition_type: on_job_failure
        enabled: true
      Create-Organization->Log-error:
        source_job: Create-Organization
        target_job: Log-error
        condition_type: on_job_failure
        enabled: true
      Annonymize-Data->Map-Data:
        source_job: Annonymize-Data
        target_job: Map-Data
        condition_type: on_job_success
        enabled: true
      Map-Data->Create-Organization:
        source_job: Map-Data
        target_job: Create-Organization
        condition_type: on_job_success
        enabled: true
      Map-Data->Create-Condition:
        source_job: Map-Data
        target_job: Create-Condition
        condition_type: on_job_success
        enabled: true
      Map-Data->Create-Patient:
        source_job: Map-Data
        target_job: Create-Patient
        condition_type: on_job_success
        enabled: true
      Map-Data->Create-Encounter:
        source_job: Map-Data
        target_job: Create-Encounter
        condition_type: on_job_success
        enabled: true
  test-patient-fhir:
    name: test-patient-fhir
    jobs:
      Post-Patient:
        name: Post Patient
        adaptor: '@openfn/language-http@latest'
        # credential:
        # globals:
        body: |
          post("Patient", {body: state.data,  
           headers: {'content-type': 'application/json'}, 
           parseAs: 'json',
           //errors: { 400: false }, 
           })
    triggers:
      webhook:
        type: webhook
        enabled: true
    edges:
      webhook->Post-Patient:
        source_trigger: webhook
        target_job: Post-Patient
        condition_type: always
        enabled: true